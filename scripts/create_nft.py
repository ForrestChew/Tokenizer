import sys
sys.path.append("metadata_info")
import json
import requests
from metadata_template import nft_metadata
from brownie import NftFactory, ERC20Token
from scripts.utils import get_account, network, config
from metadata_template import nft_metadata

def create_nft_metadata():
    filepath = "./stylized.png"
    with open(filepath, "rb") as styled_image_path:
        image_binary = styled_image_path.read()
        ipfs_url = "http://127.0.0.1:5001"
        endpoint = "/api/v0/add"
        response = requests.post(ipfs_url + endpoint, files={"file": image_binary})
        ipfs_hash = response.json()["Hash"]
        filename = filepath.split("/")[-1:][0]
        image_uri = f"https://ipfs.io/ipfs/{ipfs_hash}?filename={filename}"
    with open("metadata_info/metadata.json", "w") as updated_metadata_image:
        nft_metadata["image"] = image_uri
        json.dump(nft_metadata, updated_metadata_image, indent=2)
        print(image_uri)
    with open("metadata_info/metadata.json", "r") as metadata_read:
        image_uri_json = metadata_read.read()

def mint_nft(image_uri_json):
    account = get_account()
    nft_factory = NftFactory[-1]
    tx = nft_factory.createNFT(
        image_uri_json,
        {"from": account}
    )
    print(f"  This is the {nft_factory.tokenCounter()}th collectable")

# Creates random amount of tokens. The number of tokens created
# is based on the random number returned from VRFCoordinator.
# This number will always be from 1 - 15 
# More info on randomness can be found at: https://docs.chain.link/docs/get-a-random-number/
def mint_tokens():
    account = get_account()
    token_contract = ERC20Token[-1]
    print(f"  Minting tokens form {token_contract}")
    tx = token_contract.getRandomNumber({"from": account})
    print(f"  Chainlink VRF called\nVerifying random number...")

# Returns the current total supply of tokens
def get_total_supply():
    account = get_account()
    token_contract = ERC20Token[-1]
    get_total_supply = token_contract.totalSupply()
    print(f"  Total supply: {get_total_supply}")

# Returns the random number generated by the VRFCoordinator
def get_random_result():
    account = get_account()
    token_contract = ERC20Token[-1]
    get_random_number = token_contract.randomResult()
    print(f"  Random number returned: {get_random_number}")

def main():
    create_nft_metadata()
    mint_nft()